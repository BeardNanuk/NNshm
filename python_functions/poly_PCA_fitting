#! /usr/bin/python

### sklearn --- linear_model 

from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures


# select the first three attributes of the thresholded image: area, width, length 
output_matrix.Y3 = output_matrix.Y_reduced

# backup X, Y3; just in case!
output_matrix.Xtemp = output_matrix.X
output_matrix.Y3temp = output_matrix.Y3

#prepare the polynomical features 
poly = PolynomialFeatures(degree=para.numberFeature)
Xpoly = poly.fit_transform(output_matrix.X)


# seed number for random state 
if flag.random_state_iteration == 1:
    rs_start = 0 
    rs_end = 43
    random_range = range(rs_start,rs_end)
elif flag.random_state_iteration == 2:
    randome_state_temp = 0
    rs_start = randome_state_temp
    rs_end = rs_start + 1
    random_range = range(rs_start,rs_end)


cvscoremeanlist = np.zeros(1)


def NNpredcheck(x,y,model):
    Yt1 = model.predict(np.array([[x, y]]))
    return Yt1

# #text35 = 'output (3 5): ' + np.array_str(NNpredcheck(3,5,clf)) + '\n'
# headline = 'feature_star %d thold %d percent  \n' % (feature_star,thold*100)
# #NNpredcheck(3,5,clf)

#outputfilename ='oput/poly/poly%d/NN3paraRDstate.csv' % (numberFeature)

######## outputfilename = directory + '/NN3paraRDstate.csv'

######## with open(outputfilename, "w") as f:
########     f.write(' ')
para.TEST_SIZE = 0.1

if flag.data_spit == 1:
    # just extract the slip dimensions
    X_train, X_test, Y3_train, Y3_test = train_test_split(Xpoly, output_matrix.Y3, test_size=para.TEST_SIZE, random_state=0)
    predict3D = np.zeros(Y3_test.shape)

elif flag.data_spit == 2: # whether to split data
    X_train = Xpoly
    Y3_train =  output_matrix.Y3
    predict3D = np.zeros(Y3_test.shape)    



########################################## ppt slide with full address  ########################
para.total_filename_pptx = para.dir_each_folder_name + '/'+ para.each_folder_name + '.pptx'
para.each_folder_para_png =para.dir_each_folder_name + '/para'+ para.each_folder_name + '.png'
para.each_folder_performance_png = para.dir_each_folder_name + '/performance'+ para.each_folder_name + '.png'
para.fixed_folder_performance_png = para.rootoutdir +  para.fixed_folder_name + '/performance'+ para.each_folder_name + '.png'


para.each_folder_flag_png = para.dir_each_folder_name + '/flag'+ para.each_folder_name + '.png'

### output files into pictures or PPT slides
 
prs = Presentation()
title_slide_layout = prs.slide_layouts[0]
slide = prs.slides.add_slide(title_slide_layout)
title = slide.shapes.title
subtitle = slide.placeholders[1]

title.text = "Machine learning for damage width and length to PCA prediction"
subtitle.text = para.each_folder_name

prs.save(para.total_filename_pptx)



for random_statevalue in random_range: 
    #print('random state = ', random_statevalue)
    X_train, X_test, Y3_train, Y3_test = train_test_split(Xpoly, output_matrix.Y3, test_size=para.TEST_SIZE, random_state=random_statevalue)
# change it to multiple features for polyno

#     # ordinary least squares
#     clf = linear_model.LinearRegression()
#     # univariate
#     clf.fit(X_train,Y3_train)
#     clf.score(X_test, Y3_test) 

    clf = linear_model.LinearRegression()
    clf.fit(X_train,Y3_train)
    clfscore = clf.score(X_test, Y3_test) 
    
      
    textclfscore = ' clf score : ' + np.array_str(clfscore) + '\n'
    clfscorestr = np.array_str(clfscore) + '\n'
    

    # #    f.write(text35)
    # if flag_output_screen == 1:
    #     print(textclfscore)
    #     f= open(outputfilename,"a+")
    #     str1 =  '\n'+'random state =' + str(random_statevalue) +'\n'
    #     f.write(str1)      
    #     #indexnumber = 1

    #     for irad in range(2):
    #         indexnumber = irad
    #         #print('random state =', random_statevalue)
      
    #         str1 =  'width and length = ' + np.array_str(X_test[indexnumber,:].reshape(1,-1)) +'\n'
    #         f.write(str1)
    #         print('width and length = ', X_test[indexnumber,:].reshape(1,-1) )
    #         str1 =  'predicted = ' + np.array_str(clf.predict(X_test[indexnumber,:].reshape(1,-1))) +'\n'
    #         f.write(str1)
    #         print('predicted = ', clf.predict(X_test[indexnumber,:].reshape(1,-1) ))
    #         str1 =  'labeled = ' + np.array_str(Y3_test[indexnumber,:]) +'\n'
    #         f.write(str1)
    #         print('labeled = ', Y3_test[indexnumber,:])
    #         str1 = 'Ratio = ' + np.array_str(clf.predict(X_test[indexnumber,:].reshape(1,-1) )/Y3_test[indexnumber,:]) + '\n'
    #         f.write(str1)
    #         print('Ratio = ', clf.predict(X_test[indexnumber,:].reshape(1,-1) )/Y3_test[indexnumber,:]) 

    
    # pmodel = linear_model.LinearRegression()

    # cv = ShuffleSplit(n_splits=10, test_size=TEST_SIZE, random_state=random_statevalue)
    # cvscores = cross_val_score(pmodel, Xpoly, Y3, cv=cv)


    if flag.output_screen == 1:
        print('CV score are', cvscores)
        print('Mean of cv_scores are', cvscores.mean())
        str1 = 'Mean of cv_scores are ' + str(cvscores.mean()) + '\n'
        f.write(str1)
        f.close()
    Y_predict = clf.predict(X_test)
    clfscorelist = np.append(clfscorelist,clf.score(X_test, Y3_test))

    predict3D = np.dstack((predict3D, Y_predict)) 

    #cvscorelist = np.append(cvscorelist,cvscores.mean()) 

#     cvscoremeanlist = np.append(cvscoremeanlist,cvscores.mean()) 
    if random_statevalue in para.output_rs_matrix:
        para.root_folder_prediction_png = para.dir_each_folder_name + '/prediction'+ para.each_folder_name + ('rs%d.png' % random_statevalue)
        predict_plot(clf,X_test[:,1:3],Y3_test,Y_predict,para.root_folder_prediction_png,random_statevalue)
        add_slide_ze(para.root_folder_prediction_png,para.total_filename_pptx)



# cvscoremeanlistFinal = cvscoremeanlist[1:]

# seed number for random state 
# if flag.random_state_iteration == 1:
output_matrix.predict3D_Final = predict3D[:,:,1:]
output_matrix.clfscorelistFinal = clfscorelist[1:]
# elif flag.random_state_iteration == 2:
#     output_matrix.predict3D_Final = predict3D
#     output_matrix.clfscorelistFinal = clfscorelist




# cvscoremeandict = pd.Series(cvscoremeanlistFinal,index=np.arange(0,42,1))
    
  
    
# cvscoremeanlistFinal.shape

para.TEST_SIZE_PERCENT = int(para.TEST_SIZE*100)





#imagfilename = '/home/j2/Desktop/PythonTry/MLshm/oput/poly/poly%d/RSallStatesplitcv%dper.png' % (numberFeature,TEST_SIZE_PERCENT)
#######imagfilename = directory + '/RSFeature%dthold%dsplitcv%dper.png' % (para.numberFeature,(para.thold*100),para.TEST_SIZE_PERCENT)

#'/home/j2/Desktop/PythonTry/MLshm/oput/poly/poly%d/RSallStatesplitcv%dper.png' % (numberFeature,TEST_SIZE_PERCENT)


# fig = plt.figure()
# plt.plot(cvscoremeandict, 'b-')
# plt.ylim([0.8, 1])
# #plt.plot(cvscoredict, 'r-')
# plt.title('Feasure start %d, end %d, threshold %d' % (feature_star,feature_end, thold))
# plt.xlabel('various random state number, poly feature num %d' % numberFeature)
# #plt.ylabel('cv mean score for %d %' % numberFeature) # int(TEST_SIZE*100)

# plt.ylabel('cv mean score for')   #% TEST_SIZE_PERCENT %d

# plt.savefig(imagfilename,format='png', dpi=300)
# plt.legend(['averaged CV score'], loc=4) # 
# plt.show()
# plt.close()    





textplot(para, para.each_folder_para_png)
add_slide_ze(para.each_folder_para_png,para.total_filename_pptx)
textplot(flag, para.each_folder_flag_png)
add_slide_ze(para.each_folder_flag_png,para.total_filename_pptx)
para.each_folder_PCAreduced_png = para.dir_each_folder_name + '/PCAreduced'+ para.each_folder_name + '.png'
implt7_save(output_matrix.Y_reduced,location_each = para.each_folder_PCAreduced_png)
add_slide_ze(para.each_folder_PCAreduced_png,para.total_filename_pptx,left_start=0.1,top_start=1,width=9,height=1.8)



# add a few filtered images 

total_intex_matrix_for_plot = [1,20,40,60,80,100]


column_number = 3 

if (len(total_intex_matrix_for_plot)<column_number+1):
    #do nothing
    pass
else:
    last_column_number = len(total_intex_matrix_for_plot) % column_number
    row_number = len(total_intex_matrix_for_plot)//column_number
    width_spc = 8 / (column_number)
    height_spc = 7 / (row_number)


for i in range(len(total_intex_matrix_for_plot)):
    #imagfilename = dir_each_folder_name + '/imagetotalindex%d.png' % total_intex_matrix_for_plot[i]
    para.filteredimagedir1 = para.filteredimagedir + 'imagetotalindex%d.png' % total_intex_matrix_for_plot[i]
    add_slide_ze(para.filteredimagedir1,para.total_filename_pptx,left_start=0.1,top_start=1,width=8,height=5.3) 


# seed number for random state 
if flag.random_state_iteration == 1:
    fig = plt.figure()
    plt.plot(output_matrix.clfscorelistFinal, 'b-')
    plt.ylim([0.9, 1])
    #plt.plot(cvscoredict, 'r-')
    #plt.title('Feasure start %d, end %d, threshold %d' % (feature_star,feature_end, thold))
    plt.title(para.each_folder_name)
    plt.xlabel('random state number. Poly feature num %d PCA dimension %d' % (para.numberFeature,output_data.PCA_vector_dimension))
    plt.ylabel('score (test size = %d percentage)' % para.TEST_SIZE_PERCENT)   #% TEST_SIZE_PERCENT %d


    plt.savefig(para.each_folder_performance_png,format='png', dpi=500)
    plt.savefig(para.fixed_folder_performance_png,format='png', dpi=500)
    plt.legend(['averaged CV score'], loc=4) # 
    plt.show()
    plt.close()    
     
    add_slide_ze(para.fixed_folder_performance_png,para.total_filename_pptx)

elif flag.random_state_iteration == 2:
    fig = plt.figure()
    plt.plot(randome_state_temp,output_matrix.clfscorelistFinal, 'bo')
    plt.ylim([0.5, 1])
    #plt.plot(cvscoredict, 'r-')
    #plt.title('Feasure start %d, end %d, threshold %d' % (feature_star,feature_end, thold))
    plt.title(para.each_folder_name)
    plt.xlabel('random state number. Poly feature num %d PCA dimension %d' % (para.numberFeature,output_data.PCA_vector_dimension))
    plt.ylabel('score (test size = %d percentage)' % para.TEST_SIZE_PERCENT)   #% TEST_SIZE_PERCENT %d


    plt.savefig(para.each_folder_performance_png,format='png', dpi=500)
    plt.savefig(para.fixed_folder_performance_png,format='png', dpi=500)
    plt.legend(['averaged CV score'], loc=4) # 
    plt.show()
    plt.close()    
     
    add_slide_ze(para.fixed_folder_performance_png,para.total_filename_pptx)





