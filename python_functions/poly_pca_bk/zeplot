#! /usr/bin/python

def implt(image,title_name=None,save_path = None, flag_save = None):

    if title_name is None:
       title_name = 'plot'
    if save_path is None:
       save_path = ''
    if flag_save is None:
       flag_save = 1

    plt.close()
    plt.imshow(ndimage.rotate(image,90))
    plt.colorbar()
    plt.title("Original", fontsize=16)
    if save_path is None:
       save_path = ''
    plt.show()



def implt2(Y_train,Y_recovered,index):
    #gs = gridspec.GridSpec(1,2, height_ratios=[1,1])
    #fig = plt.figure()
    plt.figure(figsize=(12, 7))
    ax1 = plt.subplot(121)
    ax1.imshow(ndimage.rotate(Y_train[index,:].reshape(401,401),90))
    plt.title("Original", fontsize=16)

    ax2 = plt.subplot(122)
    ax2.imshow(ndimage.rotate(Y_recovered[index,:].reshape(401,401),90))
    plt.title("Compressed", fontsize=16)

    plt.show()

def implt3(Y_train,Y_recovered,idx,idy):
    #gs = gridspec.GridSpec(1,2, height_ratios=[1,1])
    #fig = plt.figure()
    index=dfX.index[(dfX['x (mm)'] == idx) & (dfX['y (mm)'] == idy)]
    plt.figure(figsize=(8, 5))
    ax1 = plt.subplot(121)
    ax1.imshow(ndimage.rotate(Y_train[index,:].reshape(401,401),90))
    plt.title("Original", fontsize=16)

    ax2 = plt.subplot(122)
    ax2.imshow(ndimage.rotate(Y_recovered.reshape(401,401),90))
    plt.title("Predicted", fontsize=16)
     
    plt.show()


def implt3_without(Y_train,Y_recovered,idx,idy):
    #gs = gridspec.GridSpec(1,2, height_ratios=[1,1])
    #fig = plt.figure()
    index=dfX.index[(dfX['x (mm)'] == idx) & (dfX['y (mm)'] == idy)]
    plt.figure(figsize=(8, 5))
    ax1 = plt.subplot(121)
    ax1.imshow(ndimage.rotate(Y_train[index,:].reshape(401,401),90))
    plt.title("Original", fontsize=16)

    ax2 = plt.subplot(122)
    ax2.imshow(ndimage.rotate(Y_recovered.reshape(401,401),90))
    plt.title("Predicted", fontsize=16)
     
    plt.show()


def implt4(image):
    #gs = gridspec.GridSpec(1,2, height_ratios=[1,1])
    #fig = plt.figure()
    plt.figure(figsize=(24, 10))
    #ax1 = plt.subplot(121)
    plt.imshow(ndimage.rotate(image,90))
    plt.colorbar()
    plt.title("Original", fontsize=16)

    plt.show()

def implt5(image):

    fig, ax = plt.subplots(figsize=(12,6))
    im = ax.imshow(ndimage.rotate(image,90))
    ax.set_xlabel("x label")
    fig.colorbar(im, orientation="horizontal", fraction=0.05, pad=0.1)
    plt.show()
    # igure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')
    # plt.imshow(ndimage.rotate(image,90), interpolation='none')

    # clb = plt.colorbar()
    # clb.ax.set_title('This is a title')
    # plt.colorbar(plt, orientation="horizontal", pad=0.2)
    # plt.show()    

def implt5_save(image,location_out=None,location_each=None):


    fig, ax = plt.subplots()
    fig.set_figheight(12)
    fig.set_figwidth(10)
    im = ax.imshow(ndimage.rotate(image,90))
    ax.set_xlabel("data samples")
    ax.set_ylabel("vectors in principal direction")
    fig.colorbar(im, orientation="horizontal", fraction=0.02, pad=0.1)
    
    plt.savefig(location_out,format='png', dpi=500)
    plt.savefig(location_each,format='png', dpi=500)
    if (location_out != 0):    
        plt.savefig(location_out,format='png', dpi=500)

    if (location_each != 0):         
        plt.savefig(location_each,format='png', dpi=500)
    plt.show()   

def implt7_save(signals,location_out=None,location_each=None):

    aspect = 2 # ratio between im and colorbar
    pad_fraction = 1

    plt.figure(figsize = (14,2))
    #plt.subplots(figsize=(9, 2))
    ax = plt.gca()
    #im = ax.imshow(np.arange(100).reshape((10,10)))
    for n in range(len(signals[0,:])):
        im = ax.plot(signals[:,n],label="n={0}".format(n+1)) 
        plt.legend(shadow=True, fancybox=True)
    #im = ax.imshow(ndimage.rotate(image,90))
    #im = ax.imshow(image)
    ax.set_xlabel("data samples")
    ax.set_ylabel("vectors in principal direction")
    #fig.colorbar(im, orientation="horizontal", fraction=0.02, pad=0.1)
    
    # create an axes on the right side of ax. The width of cax will be 5%
    # of ax and the padding between cax and ax will be fixed at 0.05 inch.
                # divider = make_axes_locatable(ax)
                # width = axes_size.AxesY(ax, aspect=1./aspect)
                # pad = axes_size.Fraction(pad_fraction, width)
                # cax = divider.append_axes("right", size=width, pad=pad)

                # plt.colorbar(im, cax=cax)

    plt.savefig(location_out,format='png', dpi=500)
    plt.savefig(location_each,format='png', dpi=500)
    if (location_out != 0):    
        plt.savefig(location_out,format='png', dpi=500)

    if (location_each != 0):         
        plt.savefig(location_each,format='png', dpi=500)
    plt.show()   

        
def implt6(image):
#   plot figure 
    fig, ax = plt.subplots(figsize=(16,6))
    spc = 3

    for i in range(len(image[:,1])):
        offset = spc * (i)
        plot(image[i,:]+offset)

    #im = ax.imshow(ndimage.rotate(image,90))
    ax.set_xlabel("x label")
    #fig.colorbar(im, orientation="horizontal", fraction=0.05, pad=0.1)
    plt.show()    


def textplot(struct_variable,filename):

    attributes = [a for a in dir(struct_variable)
                  if not (a.startswith('__') and a.endswith('__'))
                  and not (a == 'kernel')]

    fig = plt.figure(figsize=(10, 7))
    #fig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')

    ax = fig.add_subplot(111)
    fig.subplots_adjust(top=0.85)
    ax.set_title(str(struct_variable.name))

    ax.set_xlabel('xlabel')
    ax.set_ylabel('ylabel')

    spc = 0.3

    for i in range(len(attributes)):
        offset = spc * (i)
        str_temp = attributes[i] + ' = ' + str((getattr(struct_variable, attributes[i])))
        #str_temp = attributes[i] + ' = ' + str("%.5f" % (getattr(struct_variable, attributes[i])))
        ax.text(0.3, 9.5-offset,str_temp, fontsize=11)

    ax.axis([0, 10, 0, 10])
    #plt.axis('off')
    
    plt.savefig(filename,format='png', dpi=500)
    plt.show()
    plt.close()  


def predict_plot(model_name,X_test,Y_test,Y_predict,filename,rs_state):

 
    fig = plt.figure(figsize=(10, 7))
    #fig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')

    ax = fig.add_subplot(111)
    fig.subplots_adjust(top=0.85)
    ax.set_title(str(model_name))
    ax.set_xlabel('random_state = %d' % rs_state)
    ax.set_ylabel(' ')

    spc = 0.3
    np.set_printoptions(precision=3)
    for i in range(len(X_test[:,0])):
        offset = spc * (i)
        str_temp = str(X_test[i,:]) + '  ' + str(Y_predict[i,:]) + '  ' + str(Y_test[i,:])
        #str_temp = attributes[i] + ' = ' + str("%.5f" % (getattr(struct_variable, attributes[i])))
        ax.text(0.3, 9.5-offset,str_temp, fontsize=11)

    ax.axis([0, 10, 0, 10])
    #plt.axis('off')
    
    plt.savefig(filename,format='png', dpi=500)
    plt.show()
    plt.close()  


def add_slide_ze(img_path,filename_pptx,left_start=None,top_start=None,width=None,height=None):

    if left_start is None:
       left_start = 0

    if top_start is None:
       top_start = 0.1

    if width is None:
       width = 9

    if height is None:
       height = 7

    prs = Presentation(filename_pptx)
 
    blank_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(blank_slide_layout)

    left = Inches(left_start)
    top = Inches(top_start)
    width = Inches(width)
    height = Inches(height)


    pic = slide.shapes.add_picture(img_path, left, top,width=width,height=height)

    # left = Inches(5)
    # height = Inches(5.5)
    # pic = slide.shapes.add_picture(img_path, left, top, height=height)
    
    prs.save(filename_pptx)


